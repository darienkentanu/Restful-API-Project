openapi: 3.0.2
info:
  title: ALTA Store
  version: 1.0.0
servers:
  - url: https://localhost:8000
paths:
  /register:
    post:
      tags:
        - Users
      summary: Customer registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullname:
                  type: string
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                phone_number:
                  type: string
                gender:
                  type: string
                  enum: [male, female]
                address:
                  type: string
      responses:
        '200':
          $ref: "#/components/responses/ResponseCreateCustomer"
        '400':
          $ref: "#/components/responses/ServerError"   
  /login:
    post:
      tags:
        - Users
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          $ref: "#/components/responses/ResponseLoginUser"
        '400':
          $ref: "#/components/responses/ServerError"

  /users:
    get:
      security:
        - bearerAuth: []
      tags:
        - Users
      summary: Get all users
      responses:
        '200':
          $ref: "#/components/responses/ResponseGetAllUsers"
        '400':
          $ref: "#/components/responses/UnauthorizedError"
  /users/{id}:
    put:
      security:
        - bearerAuth: []
      tags:
        - Users
      summary: Edit user by id
      parameters:
        - name: id
          in: path
          required: true
          description: id for get specific user
          schema:
            type: number
      responses:
        '200':
          $ref: "#/components/responses/ResponseCreateCustomer"
        '400':
          $ref: "#/components/responses/UnauthorizedError"
          
  /categories:
    get:
      security:
        - bearerAuth: []
      tags:
        - Categories
      summary: Get all categories
      responses:
        '200':
          $ref: "#/components/responses/ResponseGetAllCategories"
        '400':
          $ref: "#/components/responses/UnauthorizedError"
    post:
      security:
        - bearerAuth: []
      tags:
        - Categories
      summary: Add categories
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '200':
          $ref: "#/components/responses/ResponseCreateCategory"
        '400':
          $ref: "#/components/responses/UnauthorizedError"
                  
  /categories/{id}:
    delete:
      security:
        - bearerAuth: []
      tags:
        - Categories
      summary: Delete category by id
      parameters:
        - name: id
          in: path
          required: true
          description: id for delete specific category
          schema:
            type: number
      responses:
        '200':
          $ref: "#/components/responses/ResponseDeleteCategory"
        '400':
          $ref: "#/components/responses/UnauthorizedError"
          
  /products:
    get:
      security:
        - bearerAuth: []
      tags:
        - Products
      summary: Get all products
      responses:
        '200':
          $ref: "#/components/responses/ResponseGetAllProducts"
        '400':
          $ref: "#/components/responses/UnauthorizedError"
    post:
      security:
        - bearerAuth: []
      tags:
        - Products
      summary: Add products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                quantity:
                  type: number
                price:
                  type: number
                category_id:
                  $ref: "#/components/schemas/Category/properties/id"
      responses:
        '200':
          $ref: "#/components/responses/ResponseCreateProduct"
        '400':
          $ref: "#/components/responses/UnauthorizedError"
                  
  /products/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Products
      summary: Get product by id
      parameters:
        - name: id
          in: path
          required: true
          description: id for get specific product
          schema:
            type: number 
      responses:
        '200':
          $ref: "#/components/responses/ResponseGetProduct"
        '400':
          $ref: "#/components/responses/UnauthorizedError"
    put:
      security:
        - bearerAuth: []
      tags:
        - Products
      summary: Edit product by id
      parameters:
        - name: id
          in: path
          required: true
          description: id for get specific product
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                quantity:
                  type: number
                price:
                  type: number
                category_id:
                  $ref: "#/components/schemas/Category/properties/id" 
      responses:
        '200':
          $ref: "#/components/responses/ResponseCreateProduct"
        '400':
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      security:
        - bearerAuth: []
      tags:
        - Products
      summary: Delete product by id
      parameters:
        - name: id
          in: path
          required: true
          description: id for get specific product
          schema:
            type: number 
      responses:
        '200':
          $ref: "#/components/responses/ResponseDeleteProduct"
        '400':
          $ref: "#/components/responses/UnauthorizedError"
                  
  /carts/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Carts
      summary: Get cart by cart id
      parameters:
        - name: id
          in: path
          required: true
          description: id for get specific cart
          schema:
            type: number
      responses:
        '200': 
          $ref: "#/components/responses/ResponseGetCart"
        '400':
          $ref: "#/components/responses/UnauthorizedError"
    post:
      security:
        - bearerAuth: []
      tags:
        - Carts
      summary: Add cart item by cart id
      parameters:
        - name: id
          in: path
          required: true
          description: id for get specific cart
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                product_id:
                  $ref: "#/components/schemas/Product/properties/id"
                quantity:
                  type: number
      responses:
        '200': 
          $ref: "#/components/responses/ResponseCreateCartItem"
        '400':
          $ref: "#/components/responses/UnauthorizedError"

  /cartitems/{id}:
    put:
      security:
        - bearerAuth: []
      tags:
        - Carts
      summary: Edit cart item by cart item id
      parameters:
        - name: id
          in: path
          required: true
          description: id for get specific cart item
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cart_id:
                  $ref: "#/components/schemas/Cart/properties/id"
                product_id:
                  $ref: "#/components/schemas/Product/properties/id"
                quantity:
                  type: number
                checkout_id:
                  type: number
      responses:
        '200': 
          $ref: "#/components/responses/ResponseCreateCartItem"
        '400':
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      security:
        - bearerAuth: []
      tags:
        - Carts
      summary: Delete cart item by cart item id
      parameters:
        - name: id
          in: path
          required: true
          description: id for get specific cart item
          schema:
            type: number
      responses:
        '200': 
          $ref: "#/components/responses/ResponseDeleteCartItem"
        '400':
          $ref: "#/components/responses/UnauthorizedError"
  
  /checkout:
    post:
      security:
        - bearerAuth: []
      tags:
        - Checkout
      summary: Add checkout items
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cart_id:
                  $ref: "#/components/schemas/Cart/properties/id"
                products:
                  type: array
                  items:
                    type: "object"
                    properties:
                      product_id: 
                        $ref: "#/components/schemas/Product/properties/id"
      responses:
        '200': 
          $ref: "#/components/responses/ResponseCreateCheckout"
        '400':
          $ref: "#/components/responses/UnauthorizedError"

  /transactions:
    get:
      security:
        - bearerAuth: []
      tags:
        - Transactions
      summary: Get all transactions
      responses:
        '200': 
          $ref: "#/components/responses/ResponseGetAllTransactions"
        '400':
          $ref: "#/components/responses/UnauthorizedError"
    post:
      security:
        - bearerAuth: []
      tags:
        - Transactions
      summary: Add transactions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                customer_id:
                  $ref: "#/components/schemas/User/properties/id"
                address:
                  type: string
                courier:
                  type: string
                checkout_id:
                  type: number
                payment_status:
                  type: number
      responses:
        '200': 
          $ref: "#/components/responses/ResponseCreateTransaction"
        '400':
          $ref: "#/components/responses/UnauthorizedError"
                  
  /transactions/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Transactions
      summary: Get transaction by user id
      parameters:
        - name: id
          in: path
          required: true
          description: id for get all transactions by user
          schema:
            type: number
      responses:
        '200': 
          $ref: "#/components/responses/ResponseGetTransaction"
        '400':
          $ref: "#/components/responses/UnauthorizedError"
  
  /paymentdetails:
    get:
      security:
        - bearerAuth: []
      tags:
        - Payment Details
      summary: Get all payment details
      responses:
        '200': 
          $ref: "#/components/responses/ResponseGetAllPaymentDetails"
        '400':
          $ref: "#/components/responses/UnauthorizedError"
    
  /paymentdetails/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Payment Details
      summary: Get payment detail by id
      parameters:
        - name: id
          in: path
          required: true
          description: id for get specific payment detail
          schema:
            type: number
      responses:
        '200': 
          $ref: "#/components/responses/ResponseGetPaymentDetail"
        '400':
          $ref: "#/components/responses/UnauthorizedError"
          
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: number
        fullname:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        phone_number:
          type: string
        gender:
          type: string
          enum: [male, female]
        address:
          type: string
        role:
          type: string
          enum: [admin, customer]
        token:
          type: string
        cart_id:
          $ref: "#/components/schemas/Cart/properties/id"
    Category:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
    Product:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        description:
          type: string
        quantity:
          type: number
        price:
          type: number
        category_id:
          $ref: "#/components/schemas/Category/properties/id"
    Cart:
      type: object
      properties:
        id:
          type: number
        cart_item:
          $ref: "#/components/schemas/CartItem"
    CartItem:
      type: object
      properties:
        id:
          type: number
        cart_id:
          $ref: "#/components/schemas/Cart/properties/id"
        product_id:
          $ref: "#/components/schemas/Product/properties/id"
        quantity:
          type: number
        checkout_id:
          type: number
    Checkout:
      type: object
      properties:
        id:
          type: number
        cart_id:
          $ref: "#/components/schemas/Cart/properties/id"
        products:
          type: array
          items:
            type: "object"
            properties:
              product_id: 
                $ref: "#/components/schemas/Product/properties/id"
    Transaction:
      type: object
      properties:
        id:
          type: number
        customer_id:
          $ref: "#/components/schemas/User/properties/id"
        address:
          type: string
        courier:
          type: string
        checkout_id:
          type: number
        payment_status:
          type: number
    PaymentDetail:
      type: object
      properties:
        id:
          type: number
        payment_method:
          type: string
        amount:
          type: number
        transactions_id:
          $ref: "#/components/schemas/Transaction/properties/id"

  responses:
    StatusOK:
      description: OK 
    UnauthorizedError:
      description: Access token is missing or invalid
    ServerError:
      description: Internal server error
    ResponseCreateCustomer:
      description: OK
      content:
        application/json:
          schema:
            $ref:  "#/components/schemas/User"  
          example:
            status: success
            data: 
              id: 1
              fullname: Customer
              username: customer1
              email: customer@gmail.com
              password: customer123
              phone_number: 08123456789
              gender: male
              address: earth
              token: ""
    ResponseLoginUser:
      description: OK
      content:
        application/json:
          schema:
            $ref:  "#/components/schemas/User"  
          example:
            id: 1
            fullname: Customer
            username: customer1
            email: customer@gmail.com
            password: customer123
            phone_number: 08123456789
            gender: male
            role: customer
            address: earth
            token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
    ResponseGetAllUsers:
      description: OK
      content:
        application/json:
          schema:
            $ref:  "#/components/schemas/User"  
          example:
            - id: 1
              fullname: Customer
              username: customer1
              email: customer@gmail.com
              password: customer123
              phone_number: 08123456789
              gender: male
              address: earth
              role: customer
              token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
            - id: 2
              fullname: Customer 2
              username: customer2
              email: customer2@gmail.com
              password: customer123
              phone_number: 08123456789
              gender: female
              address: earth
              role: customer
              token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
    ResponseGetAllCategories:
      description: OK
      content:
        application/json:
          schema:
            $ref:  "#/components/schemas/Category"  
          example:
            - id: 1
              name: Category 1
            - id: 2
              name: Category 2
    ResponseGetCategory:
      description: OK
      content:
        application/json:
          schema:
            $ref:  "#/components/schemas/Category"  
          example:
            id: 1
            name: Category 1
    ResponseCreateCategory:
      description: OK
      content:
        application/json:
          schema:
            $ref:  "#/components/schemas/Category"  
          example:
            status: success
            data:
              id: 1
              name: Category 1
    ResponseGetAllProducts:
      description: OK
      content:
        application/json:
          schema:
            $ref:  "#/components/schemas/Product"  
          example:
            - id: 1
              name: Product 1
              description: Desc 1
              quantity: 20
              price: 25000
              category: Book
            - id: 2
              name: Product 2
              description: Desc 2
              quantity: 25
              price: 10000
              category: Book
    ResponseGetProduct:
      description: OK
      content:
        application/json:
          schema:
            $ref:  "#/components/schemas/Product"  
          example:
            id: 1
            name: Product 1
            description: Desc 1
            quantity: 20
            price: 25000
            category_id: 1
    ResponseCreateProduct:
      description: OK
      content:
        application/json:
          schema:
            $ref:  "#/components/schemas/Product"  
          example:
            status: success
            data:
              id: 1
              name: Product 1
              description: Desc 1
              quantity: 20
              price: 25000
              category_id: 1
    ResponseGetCart:
      description: OK
      content:
        application/json:
          schema:
            $ref:  "#/components/schemas/Cart"  
          example:
            - cart_item_id: 1
              product_id: 1
              quantity: 3
            - cart_item_id: 2
              product_id: 2
              quantity: 1
    ResponseGetCartItem:
      description: OK
      content:
        application/json:
          schema:
            $ref:  "#/components/schemas/CartItem"  
          example:
            id: 1
            cart_id: 1
            product_id: 1
            quantity: 3
    ResponseCreateCartItem:
      description: OK
      content:
        application/json:
          schema:
            $ref:  "#/components/schemas/CartItem"  
          example:
            status: success
            data:
              id: 1
              cart_id: 1
              product_id: 1
              quantity: 3
    ResponseCreateCheckout:
      description: OK
      content:
        application/json:
          schema:
            $ref:  "#/components/schemas/Checkout"  
          example:
            status: success
            data:
              id: 1
              cart_id: 1
              products:
                - product_id: 1
                - product_id: 2
    ResponseGetAllTransactions:
      description: OK
      content:
        application/json:
          schema:
            $ref:  "#/components/schemas/Transaction"  
          example:
            - id: 1
              customer_id: 1
              address: earth
              courier: jne
              checkout_id: 1
              payment_status: 1
            - id: 2
              customer_id: 1
              address: venus
              courier: jnt
              checkout_id: 2
              payment_status: 0
    ResponseGetTransaction:
      description: OK
      content:
        application/json:
          schema:
            $ref:  "#/components/schemas/Transaction"  
          example:
            id: 1
            customer_id: 1
            address: earth
            courier: jne
            checkout_id: 1
            payment_status: 1
    ResponseCreateTransaction:
      description: OK
      content:
        application/json:
          schema:
            $ref:  "#/components/schemas/Transaction"  
          example:
            status: success
            data:
              id: 1
              customer_id: 1
              address: earth
              courier: jne
              checkout_id: 1
              payment_status: 1
    ResponseGetAllPaymentDetails:
      description: OK
      content:
        application/json:
          schema:
            $ref:  "#/components/schemas/PaymentDetail"  
          example:
            - id: 1
              payment_method: bca
              amount: 20000
              transactions_id: 1
            - id: 2
              payment_method: bni
              amount: 250000
              transactions_id: 2
    ResponseGetPaymentDetail:
      description: OK
      content:
        application/json:
          schema:
            $ref:  "#/components/schemas/PaymentDetail"  
          example:
            id: 1
            payment_method: bca
            amount: 20000
            transactions_id: 1
    ResponseDeleteCategory:
      description: OK
      content:
        application/json:
          example:
            success, category deleted successfully!
    ResponseDeleteProduct:
      description: OK
      content:
        application/json:
          example:
            success, product deleted successfully!
    ResponseDeleteCartItem:
      description: OK
      content:
        application/json:
          example:
            success, cart item deleted successfully!
    